require("abortcontroller-polyfill/dist/abortcontroller-polyfill-only");class t extends Error{constructor(t="Aborted"){super(t),this.name="AbortError"}}class e extends Promise{constructor(e,s,r={}){const a=new AbortController,i=a.signal;var o={status:"pending",data:r,resolve:()=>{},reject:()=>{},timeoutId:0,timeoutStatus:void 0};super(((s,r)=>{var a=t=>{"pending"===o.status&&(o.status="settled",s&&s(t))},u=t=>{"pending"===o.status&&(o.status="rejected",r&&r(t))};i.addEventListener("abort",(()=>{u(new t(this._abortReason))})),o.resolve=a,o.reject=u,e(a,u,i)})),this._meta=o,this.cancel=this.abort=t=>{this._abortReason=t||"Aborted",a.abort()},s&&(this._meta.timeoutStatus=!1,this._meta.timeoutId=setTimeout((()=>{this._meta.timeoutStatus=!0,this.abort(`${s}ms timeout expired`)}),s))}cancelTimeout(){return!(this.isFulfilled||!this._meta.timeoutId)&&(clearTimeout(this._meta.timeoutId),!0)}resolve(t){this._meta.resolve(t)}reject(t){this._meta.reject(t)}get abortReason(){return this._abortReason}get data(){return this._meta.data}get isFulfilled(){return"pending"!==this._meta.status}get isSettled(){return"settled"!==this._meta.status}get isRejected(){return"rejected"!==this._meta.status}get isTimedout(){return this._meta.timeoutStatus}get status(){return this._meta.status}static from=t=>t instanceof e?t:new e(((e,s)=>{t.then(e).catch(s)}))}module.exports=e;